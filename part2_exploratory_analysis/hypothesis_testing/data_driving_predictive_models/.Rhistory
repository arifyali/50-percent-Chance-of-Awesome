traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
library(e1071)
#load the dataset
dataset = read.csv("./data.csv")
#attach(Smarket)
#bin the data
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
a1 = dataset[, 11]
amount1Level = cut(a1, b=10, labels = c(1:10))
dataset = cbind(dataset, amount1Level)
a2 = dataset[, 11]
amount2Level = cut(a2, b=10, labels = c(1:10))
dataset = cbind(dataset, amount2Level)
a3 = dataset[, 11]
amount3Level = cut(a3, b=10, labels = c(1:10))
dataset = cbind(dataset, amount3Level)
a4 = dataset[, 11]
amount4Level = cut(a4, b=10, labels = c(1:10))
dataset = cbind(dataset, amount4Level)
a5 = dataset[, 11]
amount5Level = cut(a5, b=10, labels = c(1:10))
dataset = cbind(dataset, amount5Level)
dataset = dataset[, c(1,4:10,16:22)]
dataset = dataset[,c(1:13,15)]
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
library(e1071)
#load the dataset
dataset = read.csv("./data.csv")
#attach(Smarket)
#bin the data
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
a1 = dataset[, 11]
amount1Level = cut(a1, b=10, labels = c(1:10))
dataset = cbind(dataset, amount1Level)
a2 = dataset[, 11]
amount2Level = cut(a2, b=10, labels = c(1:10))
dataset = cbind(dataset, amount2Level)
a3 = dataset[, 11]
amount3Level = cut(a3, b=10, labels = c(1:10))
dataset = cbind(dataset, amount3Level)
a4 = dataset[, 11]
amount4Level = cut(a4, b=10, labels = c(1:10))
dataset = cbind(dataset, amount4Level)
a5 = dataset[, 11]
amount5Level = cut(a5, b=10, labels = c(1:10))
dataset = cbind(dataset, amount5Level)
dataset = dataset[, c(1,4:10,16:22)]
dataset = dataset[,c(1:14)]
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
library(e1071)
#load the dataset
dataset = read.csv("./data.csv")
#attach(Smarket)
#bin the data
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
a1 = dataset[, 11]
amount1Level = cut(a1, b=10, labels = c(1:10))
dataset = cbind(dataset, amount1Level)
a2 = dataset[, 11]
amount2Level = cut(a2, b=10, labels = c(1:10))
dataset = cbind(dataset, amount2Level)
a3 = dataset[, 11]
amount3Level = cut(a3, b=10, labels = c(1:10))
dataset = cbind(dataset, amount3Level)
a4 = dataset[, 11]
amount4Level = cut(a4, b=10, labels = c(1:10))
dataset = cbind(dataset, amount4Level)
a5 = dataset[, 11]
amount5Level = cut(a5, b=10, labels = c(1:10))
dataset = cbind(dataset, amount5Level)
dataset = dataset[, c(1,4:10,16:22)]
dataset = dataset[,c(1:8,9:15)]
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
library(e1071)
#load the dataset
dataset = read.csv("./data.csv")
#attach(Smarket)
#bin the data
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
a1 = dataset[, 11]
amount1Level = cut(a1, b=10, labels = c(1:10))
dataset = cbind(dataset, amount1Level)
a2 = dataset[, 11]
amount2Level = cut(a2, b=10, labels = c(1:10))
dataset = cbind(dataset, amount2Level)
a3 = dataset[, 11]
amount3Level = cut(a3, b=10, labels = c(1:10))
dataset = cbind(dataset, amount3Level)
a4 = dataset[, 11]
amount4Level = cut(a4, b=10, labels = c(1:10))
dataset = cbind(dataset, amount4Level)
a5 = dataset[, 11]
amount5Level = cut(a5, b=10, labels = c(1:10))
dataset = cbind(dataset, amount5Level)
dataset = dataset[, c(1,4:10,16:22)]
dataset = dataset[,c(1,3:15)]
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:15)]
testdata = testdataset[,c(1:4,6:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
View(traindataset)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:10,11:15)]
testdata = testdataset[,c(1:4,6:10,11:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:10,12:15)]
testdata = testdataset[,c(1:4,6:10,12:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:11,13:15)]
testdata = testdataset[,c(1:4,6:11,13:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:11,13:15)]
testdata = testdataset[,c(1:4,6:11,13:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:12,14:15)]
testdata = testdataset[,c(1:4,6:12,14:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:13,15)]
testdata = testdataset[,c(1:4,6:13,15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:4,6:14)]
testdata = testdataset[,c(1:4,6:14)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:3,6:15)]
testdata = testdataset[,c(1:3,6:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
View(traindata)
View(traindata)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1:2,4,6:15)]
testdata = testdataset[,c(1:2,4,6:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(class)
#load the dataset
dataset = read.csv("./kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,c(1,3,4,6:15)]
testdata = testdataset[,c(1,3,4,6:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
