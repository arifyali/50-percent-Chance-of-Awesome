library(ISLR)
install.packages("tree")
setwd("~/Documents/GU/course/IntroToDataAnalysis/50-percent-Chance-of-Awesome/part2_exploratory_analysis/hypothesis_testing/data_driving_predictive_models")
install.packages("rpart")
library(rpart.plot)
plotcp(prune_model)
library(ISLR)
library(tree)
#load the dataset
dataset = read.csv("./breast-cancer.csv")
#take a look at first several rows
head(dataset)
#range(dataset$attr1)
#append a new column named High
#High = ifelse(trainset$attr1>6.2,"Yes","No")
#trainset = data.frame(trainset,High)
#discard one column
#trainset = trainset[2:30]
#just keep one column of the table
#trainset = trainset[2]
#split the data into trainset and testset
#set seed to make sure next time you run the program, it gives you the same result
#10 folds across - get train data and test data
set.seed(2)
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -trainset
traindata = dataset[train,]
testdata = dataset[test,]
#head(trainset)
#head(testset)
#build the tree model using the train data
#we want to predict the attribute class, we use all other attributes to train this model, the dataset we use is traindata
tree_model = tree(traindata$class~.,traindata)
#show the tree structure
plot(tree_model)
text(tree_model, pretty = 0)
#check the performance of the model using test data
tree_predict = predict(tree_model, testdata, type="class")
mean(tree_predict==testdata$class)
var(tree_predict==testdata$class)
#confint(tree_predict==testdata$class)
#how to get mean, variance, confidence interval???????????
#prune the tree to improve the performance
set.seed(3)
cv_tree = cv.tree(tree_model, FUN = prune.misclass)
#see the cv_tree's attributes
names(cv_tree)
plot(cv_tree$size, cv_tree$dev, type = "b")
#we can see that when size==3, the error is least
prune_model = prune.misclass(tree_model, best = 8)
#show the tree structure after pruning
plot(prune_model)
text(prune_model, pretty = 0)
tree_predict_after_prune = predict(prune_model, testdata, type = "class")
mean(tree_predict_after_prune == testdata$class)
var(tree_predict==testdata$class)
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(2:30)], normalize))
View(normalizedDataset)
View(normalizedDataset)
str(normalizedDataset)
summary(normalizedDataset)
set.seed(2)
train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
test = -train
traindata = std_data[train,]
testdata = std_data[test,]
traindata = normalizedDataset[train,]
testdata = normalizedDataset[test,]
View(testdata)
View(traindata)
set.seed(2)
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = normalizedDataset[1:500]
testdata = normalizedDataset[501:569]
#test = -train
traindata = normalizedDataset[1:500, ]
testdata = normalizedDataset[501:569, ]
View(testdata)
View(traindata)
trainTarget = dataset[1:500, 1]
testTarget = dataset[501:569, 1]
sqrt(569)
model = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
library(class)
model = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
model
table(testTarget, result)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
preprocDataset = cbin(dataset[,1], normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
View(preprocDataset)
library(class)
#load the dataset
dataset = read.csv("./breast-cancer.csv")
#attach(Smarket)
#preproces: normalize the attributes
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(2:30)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
set.seed(100)
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
#10-folds-accross
set.seed(2)
#train = sample(1:nrow(normalizedDataset),nrow(normalizedDataset)*9/10)
#test = -train
traindata = traindataset[,2:30]
testdata = testdataset[,2:30]
trainTarget = traindataset[, 1]
testTarget = testdataset[, 1]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
library(ISLR)
library(tree)
#load the dataset
dataset = read.csv("./breast-cancer.csv")
#take a look at first several rows
head(dataset)
#range(dataset$attr1)
#append a new column named High
#High = ifelse(trainset$attr1>6.2,"Yes","No")
#trainset = data.frame(trainset,High)
#discard one column
#trainset = trainset[2:30]
#just keep one column of the table
#trainset = trainset[2]
#split the data into trainset and testset
#set seed to make sure next time you run the program, it gives you the same result
#10 folds across - get train data and test data
set.seed(2)
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -trainset
traindata = dataset[train,]
testdata = dataset[test,]
#head(trainset)
#head(testset)
#build the tree model using the train data
#we want to predict the attribute class, we use all other attributes to train this model, the dataset we use is traindata
tree_model = tree(traindata$class~.,traindata)
#show the tree structure
plot(tree_model)
text(tree_model, pretty = 0)
#check the performance of the model using test data
tree_predict = predict(tree_model, testdata, type="class")
mean(tree_predict==testdata$class)
var(tree_predict==testdata$class)
#confint(tree_predict==testdata$class)
#how to get mean, variance, confidence interval???????????
#prune the tree to improve the performance
set.seed(3)
cv_tree = cv.tree(tree_model, FUN = prune.misclass)
#see the cv_tree's attributes
names(cv_tree)
plot(cv_tree$size, cv_tree$dev, type = "b")
#we can see that when size==3, the error is least
prune_model = prune.misclass(tree_model, best = 8)
#show the tree structure after pruning
plot(prune_model)
text(prune_model, pretty = 0)
tree_predict_after_prune = predict(prune_model, testdata, type = "class")
table(tree_predict_after_prune, testdata$class)
mean(tree_predict_after_prune == testdata$class)
var(tree_predict==testdata$class)
table(tree_predict, testdata$class)
