combined_open_secrets$Total[
combined_open_secrets$unique_id == i], na.rm = T) !=
unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i]))
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
if(sum(
combined_open_secrets$industrypercent[
combined_open_secrets$unique_id == i], na.rm = T)[1] < .99)
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
}
View(combined_open_secrets)
table(combined_open_secrets$the_number_match)
i
sum(
combined_open_secrets$Total[
combined_open_secrets$unique_id == i], na.rm = T)
sum(
combined_open_secrets$Total[
combined_open_secrets$unique_id == i])
combined_open_secrets$Total[combined_open_secrets$unique_id == i]
combined_open_secrets[combined_open_secrets$unique_id == i,]
for(i in unique_candidates){
if(sum(
combined_open_secrets$Total[
combined_open_secrets$unique_id == i], na.rm = T) !=
unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i]))
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
if(sum(
combined_open_secrets$industrypercent[
combined_open_secrets$unique_id == i], na.rm = T)[1] < .95)
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
}
warnings()
combined_open_secrets$the_number_match
table(combined_open_secrets$the_number_match)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name, combined_open_secrets$Cycle)
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
if(sum(
combined_open_secrets$Total[
combined_open_secrets$unique_id == i], na.rm = T) !=
unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i]))
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
if(sum(
combined_open_secrets$industrypercent[
combined_open_secrets$unique_id == i], na.rm = T)[1] < .95)
{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i] =
paste0(combined_open_secrets$the_number_match[
combined_open_secrets$unique_id == i], "T")
}
}
table(combined_open_secrets$the_number_match)
i <- unique_candidates[1]
i
combined_open_secrets$Total[
combined_open_secrets$unique_id == i], na.rm = T)
combined_open_secrets$Total[
combined_open_secrets$unique_id == i]
sum(combined_open_secrets$Total[
combined_open_secrets$unique_id == i])
sum(combined_open_secrets$Total[
combined_open_secrets$unique_id == i]) == 178998
unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i]))
unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i])
combined_open_secrets$Total[
combined_open_secrets$unique_id == i] == unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i])
sum(combined_open_secrets$Total[
combined_open_secrets$unique_id == i]) == unique(combined_open_secrets$candtotal[
combined_open_secrets$unique_id == i])
sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) == (combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1]
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1]
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}
else{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
for(i in unique_candidates){
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1]
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
for(i in unique_candidates){
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
table(combined_open_secrets$the_number_match)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name, combined_open_secrets$Cycle)
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
table(combined_open_secrets$the_number_match)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name, combined_open_secrets$Cycle)
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
tail(combined_open_secrets$the_number_match)
i
View(combined_open_secrets[combined_open_secrets$unique_id == i,])
?complete.cases
names(combined_open_secrets)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name,
combined_open_secrets$Cycle,
combined_open_secrets$Party)
combined_open_secrets[complete.cases(combined_open_secrets[, c("Total", "industrypercent", "candtotal")]),]
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name,
combined_open_secrets$Cycle,
combined_open_secrets$Party)
combined_open_secrets <- combined_open_secrets[complete.cases(combined_open_secrets[, c("Total", "industrypercent", "candtotal")]),]
combined_open_secrets$the_number_match = ""
for(i in unique_candidates){
print(i)
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
if(sum(combined_open_secrets$industrypercent[combined_open_secrets$unique_id == i]) < 0.95)
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
combined_open_secrets$Total[combined_open_secrets$unique_id == i]
i
combined_open_secrets$Total[combined_open_secrets$unique_id == "Gary Ackerman2012"]
View(combined_open_secrets)
unique_candidates = unique(combined_open_secrets$unique_id)
unique_candidates[1]
for(i in unique_candidates){
print(i)
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
if(sum(combined_open_secrets$industrypercent[combined_open_secrets$unique_id == i]) < 0.95)
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
combined_open_secrets <- combined_open_secrets[complete.cases(combined_open_secrets[, c("Total", "industrypercent", "candtotal")]),]
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
# print(i)
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
if(sum(combined_open_secrets$industrypercent[combined_open_secrets$unique_id == i]) < 0.95)
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
