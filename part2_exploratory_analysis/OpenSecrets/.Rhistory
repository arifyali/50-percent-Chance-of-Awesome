my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(200, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(200, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(200, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(50, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(200, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(200, 25, 7)
my.vars[i] <- var(x)
}
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars = sapply(1:1000, function(){var(rnorm(20, 25, 7))})
my.vars = sapply(1:1000, function(x){var(rnorm(20, 25, 7))})
my.vars <- numeric(1000)
for (i in 1:1000)
{
x <- rnorm(20, 25, 7)
my.vars[i] <- var(x)
}
my.vars = sapply(rep(20, times = 1000), function(x){var(rnorm(x, 25, 7))})
rep(20, times = 1000)
Z = (51-48)/(9/sqrt(30))
pnorm(Z, lower.tail = F)
simX_Y = function(i){
X = rnorm(9, mean = 7, sd = 3)
Y = rnorm(12, mean = 10, sd = 5)
meanY_X = mean(X) - mean(Y)
sdY_X = sqrt((sd(X))^2/sqrt(length(X))+(sd(Y))^2/sqrt(length(Y)))
return(list(meanY_X, sdY_X))
}
aa = sapply(1:10000, simX_Y)
aa = as.data.frame(t(aa))
hist(unlist(aa$V1))
hist(unlist(aa$V2))
meanY_X = 7-10
sdY_X = sqrt(9/sqrt(9)+25/sqrt(12))
simX_Y = function(i){
X = rnorm(9, mean = 7, sd = 3)
Y = rnorm(12, mean = 10, sd = 5)
meanY_X = mean(X) - mean(Y)
sdY_X = sqrt((sd(X))^2/sqrt(length(X))+(sd(Y))^2/sqrt(length(Y)))
return(list(meanY_X, sdY_X))
}
Problem43B = sapply(1:10000, simX_Y)
Problem43B = as.data.frame(t(Problem43B))
hist(unlist(Problem43B$V1))
hist(unlist(Problem43B$V2))
?abline
?hist
hist(unlist(Problem43B$V1))
abline(v = meanY_X, col = "blue", lwd = 2)
hist(unlist(Problem43B$V2))
abline(v = sdY_X, col = "blue", lwd = 2)
meanY_X = 7-10
sdY_X = sqrt(9/sqrt(9)+25/sqrt(12))
#Part B
simX_Y = function(i){
X = rnorm(9, mean = 7, sd = 3)
Y = rnorm(12, mean = 10, sd = 5)
meanY_X = mean(X) - mean(Y)
sdY_X = sqrt((sd(X))^2/sqrt(length(X))+(sd(Y))^2/sqrt(length(Y)))
return(list(meanY_X, sdY_X))
}
Problem43B = sapply(1:10000, simX_Y)
Problem43B = as.data.frame(t(Problem43B))
hist(unlist(Problem43B$V1), breaks = 25)
abline(v = meanY_X, col = "blue", lwd = 2)
hist(unlist(Problem43B$V2), breaks = 25)
abline(v = sdY_X, col = "blue", lwd = 2)
X20 = replicate(1000, (rexp(20, rate = 2)))
hist(rowSums(X20), probability = T)
hist(rowSums(X20), probability = T, breaks = 25)
X20 = replicate(1000, (rexp(20, rate = 2)))
hist(rowSums(X20), probability = T, breaks = 25)
mean(X20)
var(X20)
sd(X20)
my.vars = sapply(rep(20, times = 1000), function(x){var(rnorm(x, 25, 7))})
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars = sapply(rep(50, times = 1000), function(x){var(rnorm(x, 25, 7))})
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
my.vars = sapply(rep(200, times = 1000), function(x){var(rnorm(x, 25, 7))})
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
dev.new()
qqnorm(my.vars)
qqline(my.vars)
pop = c(3,6,7,9,11,14)
Problem46 = combn(pop, m = 3, FUN = min)
mean(Problem46)
pop = c(3,6,7,9,11,14)
Problem46 = combn(pop, m = 3, FUN = min)
mean(Problem46)
hist(Problem46)
1/(25*7)
?rexp
replicate(1:1000, min(rexp(n, rate = lambda)))
Problem48B = replicate(1000, min(rexp(n, rate = lambda)))
n = 25
lambda = 7
#E(Xmin)
1/(25*7)
#[1] 0.005714286
Problem48B = replicate(1000, min(rexp(n, rate = lambda)))
hist(Problem48B)
hist(Problem48B, breaks = 50)
mean(Problem48B)
mean(Problem48B)
sd(Problem48B)
Z = (51-48)/(9/sqrt(30))
pnorm(Z, lower.tail = F)
meanY_X = 7-10
meanY_X
sdY_X
simX_Y = function(i){
X = rnorm(9, mean = 7, sd = 3)
Y = rnorm(12, mean = 10, sd = 5)
meanY_X = mean(X) - mean(Y)
sdY_X = sqrt((sd(X))^2/sqrt(length(X))+(sd(Y))^2/sqrt(length(Y)))
return(list(meanY_X, sdY_X))
}
Problem43B = sapply(1:10000, simX_Y)
Problem43B = as.data.frame(t(Problem43B))
hist(unlist(Problem43B$V1), breaks = 25)
abline(v = meanY_X, col = "blue", lwd = 2)
hist(unlist(Problem43B$V2), breaks = 25)
abline(v = sdY_X, col = "blue", lwd = 2)
mean(unlist(Problem43B$V1))
mean(unlist(Problem43B$V2))
X20 = replicate(1000, (rexp(20, rate = 2)))
hist(rowSums(X20), probability = T, breaks = 25)
X20 = replicate(1000, (rexp(20, rate = 2)))
hist(rowSums(X20), probability = T, breaks = 25)
mean(X20)
sd(X20)
mean(rowSums(X20))
sd(rowSums(X20))
mean(rowSums(X20)<=10)
rowSums(X20)
View(X20)
X20 = replicate(1000, sum(rexp(20, rate = 2)))
hist(X20, probability = T, breaks = 25)
sd(X20)
mean(X20)
X20 = replicate(1000, sum(rexp(20, rate = 2)))
hist(X20, probability = T, breaks = 25)
var(X20)
mean(rowSums(X20)<=10)
mean(X20<=10)
my.means = replicate(1000, mean(rexp(30, rate = 1/10)))
mean(my.means>=12)
Problem48B = replicate(1000, min(rexp(25, rate = 7)))
1/(25*7) - mean(Problem48B)
mean(Problem48B)
1/(25*7)
Problem48B = replicate(1000, min(rexp(25, rate = 7)))
1/(25*7) - mean(Problem48B)
Problem48B = replicate(1000, min(rexp(25, rate = 7)))
1/(25*7) - mean(Problem48B)
Problem48B = replicate(1000, min(rexp(25, rate = 7)))
1/(25*7) - mean(Problem48B)
Problem48B = replicate(1000, min(rexp(25, rate = 7)))
1/(25*7) - mean(Problem48B)
pop = c(3,6,7,9,11,14)
Problem46 = combn(pop, m = 3, FUN = min)
mean(Problem46)
hist(Problem46)
my.vars = sapply(rep(200, times = 1000), function(x){var(rnorm(x, 25, 7))})
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
my.vars = sapply(rep(200, times = 1000), function(x){var(rnorm(x, 25, 7))})
mean(my.vars)
var(my.vars)
hist(my.vars, breaks = 25)
simX_Y = function(i){
X = rnorm(9, mean = 7, sd = 3)
Y = rnorm(12, mean = 10, sd = 5)
meanY_X = mean(X) - mean(Y)
sdY_X = sqrt((sd(X))^2/sqrt(length(X))+(sd(Y))^2/sqrt(length(Y)))
return(list(meanY_X, sdY_X))
}
Problem43B = sapply(1:10000, simX_Y)
Problem43B = as.data.frame(t(Problem43B))
par(mfrow = c(2,1))
hist(unlist(Problem43B$V1), breaks = 25)
abline(v = meanY_X, col = "red", lwd = 2)
mean(unlist(Problem43B$V1))
hist(unlist(Problem43B$V2), breaks = 25)
abline(v = sdY_X, col = "red", lwd = 2)
mean(unlist(Problem43B$V2))
testPUBfile = read.table("~/Documents/IR data Nora Gordon/NATL1968.PUB", nrows = 2)
View(testPUBfile)
testPUBfile = read.table("~/Documents/IR data Nora Gordon/NATL1968.PUB", nrows = 2, colClasses = "character")
View(testPUBfile)
?nchar
nchar(testPUBfile$V2)
testPUBfile = read.table("~/Documents/IR data Nora Gordon/NATL1968.PUB", nrows = 200, colClasses = "character")
nchar(testPUBfile$V2)
nchar(testPUBfile$V1)
nchar(testPUBfile$V3)
View(testPUBfile)
?readLines
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 2)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
View(testPUBfile)
View(data.frame(testPUBfile))
nchar(testPUBfile[1])
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 100000)
?nchar
testPUBfile[1]
nchar(testPUBfile[1])
?first
n(tail(testPUBfile))
tail(nchar(testPUBfile))
?substring
substring(testPUBfile, 1, 1)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
substring(testPUBfile, 1, 1)
?matrix
aa = matrix(nrow = length(testPUBfile), nchar(testPUBfile))
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
aa[,1]=substring(testPUBfile, 1, 1)
View(aa)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
for(i in 1:nchar(testPUBfile)){
aa[,i]=substring(testPUBfile, i, i)
}
View(aa)
1:nchar(testPUBfile)
nchar(testPUBfile)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
for(i in 1:nchar(testPUBfile[1])){
aa[,i]=substring(testPUBfile, i, i)
}
View(aa)
data("chickwts")
chickwts$weight
unique(chickwts$feed)
boxplot(feed~weight, data = chickwts)
unique(chickwts$weight)
class(chickwts$weight)
boxplot(weight~feed, data = chickwts)
names(chickwts)
x0 = function(n){
return(qnorm(.95, 0, 1/sqrt(n)))
}
x0(20)
qnorm(.95)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name,
combined_open_secrets$Cycle,
combined_open_secrets$Party)
combined_open_secrets <- combined_open_secrets[complete.cases(combined_open_secrets[, c("Total", "industrypercent", "candtotal")]),]
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
# print(i)
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
if(sum(combined_open_secrets$industrypercent[combined_open_secrets$unique_id == i]) < 0.95)
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
table(combined_open_secrets$the_number_match)
diff_in_totals = c()
for(i in unique_candidates){
diff_in_totals = c(diff_in_totals,(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) -
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1]))
}
hist(diff_in_totals)
sum(diff_in_totals != 0)
hist(diff_in_totals != 0)
hist(diff_in_totals[diff_in_totals != 0])
hist(diff_in_totals[diff_in_totals != 0], breaks = 25)
quantile(diff_in_totals[diff_in_totals != 0])
(unique_candidates[diff_in_totals != 0])
i = "Todd Akin2012R"
(combined_open_secrets$Total[combined_open_secrets$unique_id == i])
sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i])
combined_open_secrets$candtotal[combined_open_secrets$unique_id == i]
View(combined_open_secrets[combined_open_secrets$unique_id == i, ])
sum(combined_open_secrets[combined_open_secrets$unique_id == i, "industrypercent"])
View(Contributions_by_Industry_2012_2014)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/")
Contributions_by_Industry_2012_2014 <- read.csv("Contributions by Industry 2012-2014.csv")
FundingCongress <- read.csv("FundingCongress.csv")
# this is used to index where the party symbol is in the candidate column
# Used this stackoverflow link to figure out how to select the last occurrence and '(' and ')'
# http://stackoverflow.com/questions/5214677/r-find-the-last-dot-in-a-string
Party_index_start = sapply(regexpr("\\([^\\(]*$", FundingCongress$Candidate), function(x){x[1]})+1
Party_index_end = sapply(regexpr("\\)[^\\)]*$", FundingCongress$Candidate), function(x){x[1]})-1
FundingCongress$Party = substr(FundingCongress$Candidate,Party_index_start, Party_index_end)
# Removes the Party symbol from candidate
FundingCongress$Name = substr(FundingCongress$Candidate, 1, Party_index_start-3)
# Changed name, so that rbind would not be confused.
colnames(FundingCongress)[7] = "Total"
colnames(FundingCongress)[4] = "Cycle"
names(Contributions_by_Industry_2012_2014)
# Unique ids needs to be created in order to apply the which function later in the process (not in the mood
# to build a SQL engine in R for only stacking because that's more useful for Merging)
# The ids are based on industry, cycle (year), party, and name. The idea is to avoid duplications
Contributions_by_Industry_2012_2014$unique_id_1 =paste0(Contributions_by_Industry_2012_2014$Name,
Contributions_by_Industry_2012_2014$Cycle,
Contributions_by_Industry_2012_2014$Party,
Contributions_by_Industry_2012_2014$Industry)
names(FundingCongress)
FundingCongress$unique_id =paste0(FundingCongress$Name,
FundingCongress$Cycle,
FundingCongress$Party,
FundingCongress$Industry)
# subsetting only the columns that exist in both with remain
aa = Contributions_by_Industry_2012_2014[,
which(names(Contributions_by_Industry_2012_2014)
%in% names(FundingCongress))]
# any data captured by Contributions_by_Industry_2012_2014 should not reappear so those rows are removed.
ab = FundingCongress[-which(FundingCongress$unique_id %in% Contributions_by_Industry_2012_2014$unique_id_1),
which(names(FundingCongress)
%in% names(Contributions_by_Industry_2012_2014))]
combined_open_secrets = rbind(aa, ab)
combined_open_secrets = combined_open_secrets[,-1]
mapply(unique,
combined_open_secrets[combined_open_secrets$Industry ==
unique(combined_open_secrets$Industry)[89],
-1])
combined_open_secrets$unique_id = paste0(combined_open_secrets$Name,
combined_open_secrets$Cycle,
combined_open_secrets$Party,
combined_open_secrets$candtotal)
combined_open_secrets <- combined_open_secrets[complete.cases(combined_open_secrets[, c("Total", "industrypercent", "candtotal")]),]
combined_open_secrets$the_number_match = ""
unique_candidates = unique(combined_open_secrets$unique_id)
for(i in unique_candidates){
# print(i)
if(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) !=
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1])
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
if(sum(combined_open_secrets$industrypercent[combined_open_secrets$unique_id == i]) < 0.95)
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "F")
}else
{
combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i] <-
paste0(combined_open_secrets$the_number_match[combined_open_secrets$unique_id == i], "T")
}
}
table(combined_open_secrets$the_number_match)
diff_in_totals = c()
for(i in unique_candidates){
diff_in_totals = c(diff_in_totals,(sum(combined_open_secrets$Total[combined_open_secrets$unique_id == i]) -
(combined_open_secrets$candtotal[combined_open_secrets$unique_id == i])[1]))
}
hist(diff_in_totals[diff_in_totals>0])
diff_in_totals[diff_in_totals>0]
View(combined_open_secrets[combined_open_secrets$the_number_match=="FF",])
combined_open_secrets[combined_open_secrets$unique_id == "Bonner2012R661575", "industrypercent"]
combined_open_secrets[combined_open_secrets$unique_id == "Bonner2012R661575", ]
combined_open_secrets[combined_open_secrets$unique_id == "Jo Bonner2012R661575", ]
combined_open_secrets[combined_open_secrets$unique_id == "Jo Bonner2012R661575", "industrypercent"]
sum(combined_open_secrets[combined_open_secrets$unique_id == "Jo Bonner2012R661575", "industrypercent"])
unique(combined_open_secrets[combined_open_secrets$unique_id == "Jo Bonner2012R661575", "unique_id"])
unique(combined_open_secrets[combined_open_secrets$the_number_match == "FF", "unique_id"])
View(FundingCongress)
View(ab)
dim(combined_open_secrets[combined_open_secrets$the_number_match=="FF",])
write.csv(combined_open_secrets, "combined_open_secrets.csv")
write.csv(combined_open_secrets[combined_open_secrets$the_number_match=="FF",], "combined_open_secrets_no_errors.csv")
save.image("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/OpenSecrets/OpenSecrets.RData")
