nchar(testPUBfile[1])
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 100000)
?nchar
testPUBfile[1]
nchar(testPUBfile[1])
?first
n(tail(testPUBfile))
tail(nchar(testPUBfile))
?substring
substring(testPUBfile, 1, 1)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
substring(testPUBfile, 1, 1)
?matrix
aa = matrix(nrow = length(testPUBfile), nchar(testPUBfile))
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
aa[,1]=substring(testPUBfile, 1, 1)
View(aa)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
for(i in 1:nchar(testPUBfile)){
aa[,i]=substring(testPUBfile, i, i)
}
View(aa)
1:nchar(testPUBfile)
nchar(testPUBfile)
testPUBfile = readLines("~/Documents/IR data Nora Gordon/NATL1968.PUB", n = 10)
aa = matrix(nrow = length(testPUBfile), ncol = nchar(testPUBfile))
for(i in 1:nchar(testPUBfile[1])){
aa[,i]=substring(testPUBfile, i, i)
}
View(aa)
data("chickwts")
chickwts$weight
unique(chickwts$feed)
boxplot(feed~weight, data = chickwts)
unique(chickwts$weight)
class(chickwts$weight)
boxplot(weight~feed, data = chickwts)
names(chickwts)
x0 = function(n){
return(qnorm(.95, 0, 1/sqrt(n)))
}
x0(20)
qnorm(.95)
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(.5,.5)
df = gradient_evaluation(.5,.5)
d2f = hessian_evaluation(.5,.5)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=1
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
function_evaluation = function(t){
fun = function(x1,x2){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x1,x2){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x1,x2){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
df(b_init)
function_evaluation = function(t){
fun = function(x){
return(t*(3*x[1]^2-2*x[1]*x[2]+3*x[2]^2)-
log(x[1])-log(x[2])-
log(1-x[1])-log(1-x[2]))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x){
return(
c(t*(6*x[1]-2*x[2])-1/x[1]-1/(x[1]-1),
t*(6*x[2]-2*x[1])-1/x[2]-1/(x[2]-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x){
return(matrix(
c(6*t+1/x[1]^2+1/(x[1]-1)^2,
-2*t,
-2*t,
6*t+1/x[2]^2+1/(x[2]-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b_init
b_new
b_new = list(b_new))
b_new = list(b_new)
b_new
b_new = list(b_new,2:100)
?list
b = as.list(1:100)
b[[1]] = b_new
b_new = b
b_new
b = as.list(1:100)
b[[1]]
b[[1]] = b_new
b[[1]]
b = list(1:100)
b = as.list(1:100)
b[[1]] = b_new
b_new = b
b[[1]]
b = as.list(1:100)
b[[1]][1] = b_new
b = list(b_new)
b[[2]] = 1
b
function_evaluation = function(t){
fun = function(x){
return(t*(3*x[1]^2-2*x[1]*x[2]+3*x[2]^2)-
log(x[1])-log(x[2])-
log(1-x[1])-log(1-x[2]))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x){
return(
c(t*(6*x[1]-2*x[2])-1/x[1]-1/(x[1]-1),
t*(6*x[2]-2*x[1])-1/x[2]-1/(x[2]-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x){
return(matrix(
c(6*t+1/x[1]^2+1/(x[1]-1)^2,
-2*t,
-2*t,
6*t+1/x[2]^2+1/(x[2]-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
### Part B
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b_new
as.list(b_new)
b_new = list(b_new)
b_new
b_new[[2]] = c(1,1)
b_new
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:14)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:4)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
plot(b)
sapply(b, function(x){x[1]})
sapply(b, function(x){x[2]})
?plot
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}), xlab = "x", ylab = "y", type = "l")
plot(c(0,1),c(0,1), xlab = "x1", ylab = "x2")
lines(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}))
?lines
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}),xlim = c(0,2), ylim = c(0,2), xlab = "x1", ylab = "x2")
rect(0,0,1,1)
?lines
lines(c(0, .5), c(.5,.5))
lines(c(0, 1), c(.5,.5))
PoldataSPIndustries <- read.csv("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/PoldataSPIndustries.csv")
IndustryStockData <- read.csv("IndustryChangeByTerm.csv")
NotSP500Industrydonors = data.frame("X" = rep(NA, times = 15),
"Sector" = rep(c("Not for profit", "", "Not publicly traded")
, each = 5))
NotSP500Industrydonors$AdjClose = NA
NotSP500Industrydonors$Group = rep(c("Values0506b", "Values0708b",
"Values0910b", "Values1112b",
"Values1314b"), each = 3)
NotSP500Industrydonors$YrPercentChange = NA
IndustryStockData = rbind(IndustryStockData, NotSP500Industrydonors)
IndustryStockData$RelYear = as.character(IndustryStockData$Group)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis")
PoldataSPIndustries <- read.csv("/PoldataSPIndustries.csv")
PoldataSPIndustries <- read.csv("PoldataSPIndustries.csv")
IndustryStockData <- read.csv("IndustryChangeByTerm.csv")
NotSP500Industrydonors = data.frame("X" = rep(NA, times = 15),
"Sector" = rep(c("Not for profit", "", "Not publicly traded")
, each = 5))
NotSP500Industrydonors$AdjClose = NA
NotSP500Industrydonors$Group = rep(c("Values0506b", "Values0708b",
"Values0910b", "Values1112b",
"Values1314b"), each = 3)
