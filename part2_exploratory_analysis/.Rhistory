library(ISLR)
install.packages("tree")
library(dbscan)
dataset = read.csv("./breast-cancer.csv")
dataset = dataset[2:30]
eps = 0.5
setwd("~/Documents/GU/course/IntroToDataAnalysis/50-percent-Chance-of-Awesome/part2_exploratory_analysis/Clustering")
library(dbscan)
dataset = read.csv("./breast-cancer.csv")
dataset = dataset[2:30]
eps = 0.5
MinPts = 5
db <- dbscan(dataset, eps=.4, minPts=3)
db
plot(dataset, col=db$cluster+1L)
summary(db)
dataset = read.csv("./breast-cancer.csv")
View(dataset)
View(dataset)
dataset = dataset[2:15]
View(dataset)
View(dataset)
eps = 0.5
MinPts = 5
db <- dbscan(dataset, eps=.4, minPts=3)
db
summary(db)
plot(dataset, col=db$cluster+1L)
db <- dbscan(dataset, eps=.4, minPts=3, method = "dist")
db = dbscan(dataset, eps=.4, minPts=3)
db
summary(db)
plot(dataset, col=db$cluster+1L)
install.packages("pROC")
library("pROC", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
model <- glm(WINNER ~ CANDTOTAL + INDRANK,data=political_data, family = "binomial")
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data = read.csv("PoldataSPIndustriesStockData no outliers.csv")
# Null Hypothesis: There is no relation between the YrPercentChange of Industry Stocks and the amount
# an industry contributes the rank of that industry for comtribute to a candidate and if the candidate wins
model <- lm(YrPercentChange ~ CANDTOTAL + INDRANK + WINNER,data=political_data)
summary(model)
political_data = political_data[order(political_data$INDRANK, decreasing = T),]
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE", "YEAR")]),]
model <- glm(WINNER ~ CANDTOTAL + INDRANK,data=political_data, family = "binomial")
summary(model)
estimatedwinners = predict(model, type = c("response"))
estimatedwinners
estimatedwinners[estimatedwinners<.5] = 0
estimatedwinners[estimatedwinners>=.5] = 1
estimatedwinners
?confusionMatrix
library(rpart)
?confusionMatrix
estimatedwinners = predict(model, type = c("response"))
estimatedwinners[estimatedwinners<.5] = 0
estimatedwinners[estimatedwinners>=.5] = 1
political_data$prob = estimatedwinners
library(pROC)
g = roc(WINNER ~ CANDTOTAL + INDRANK,data=political_data)
plot(g)
g$CANDTOTAL
plot(g$CANDTOTAL)
plot(g$INDRANK)
library(caret)
install.packages("caret")
library(caret)
?confusionMatrix()
table(political_data$WINNER,political_data$prob)
summary(model)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data = read.csv("PoldataSPIndustriesStockData no outliers.csv")
# Null Hyothesis: The Amount of Money and the Number of Industries backinf a candidate do not affect
# the chances of the candidate winning said election.
political_data = political_data[order(political_data$INDRANK, decreasing = T),]
Logit_pol_data = political_data[!duplicated(political_data[,c("STATE", "DISTRICT", "CANDIDATE", "YEAR")]),]
model <- glm(WINNER ~ CANDTOTAL + INDRANK,data=Logit_pol_data, family = "binomial")
summary(model)
estimatedwinners = predict(model, type = c("response"))
estimatedwinners[estimatedwinners<.5] = 0
estimatedwinners[estimatedwinners>=.5] = 1
political_data$prob = estimatedwinners
Logit_pol_data$prob = estimatedwinners
library(pROC)
g = roc(WINNER ~ CANDTOTAL + INDRANK,data=Logit_pol_data)
plot(g$CANDTOTAL)
plot(g$INDRANK)
#confusion matrix
table(political_data$WINNER,political_data$prob)
table(Logit_pol_data$WINNER,Logit_pol_data$prob)
1730/(1730+399)
1730/(1730+267)
2*0.8125881*0.8662994/(0.8125881+0.8662994)
plot(g$CANDTOTAL, main = "CANDTOTAL")
plot(g$INDRANK, main = "Number of Industries")
dataset = read.csv("./data.csv")
dataset = read.csv("PoldataSPIndustries.csv")
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
dataset = read.csv("hypothesis_testing/data_driving_predictive_models/data.csv")
View(dataset)
library(e1071)
install.packages("e1071")
library(e1071)
library(e1071)
dataset = read.csv("hypothesis_testing/data_driving_predictive_models/data.csv")
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
a1 = dataset[, 11]
amount1Level = cut(a1, b=10, labels = c(1:10))
dataset = cbind(dataset, amount1Level)
a2 = dataset[, 11]
amount2Level = cut(a2, b=10, labels = c(1:10))
dataset = cbind(dataset, amount2Level)
a3 = dataset[, 11]
amount3Level = cut(a3, b=10, labels = c(1:10))
dataset = cbind(dataset, amount3Level)
a4 = dataset[, 11]
amount4Level = cut(a4, b=10, labels = c(1:10))
dataset = cbind(dataset, amount4Level)
a5 = dataset[, 11]
amount5Level = cut(a5, b=10, labels = c(1:10))
dataset = cbind(dataset, amount5Level)
dataset = dataset[, c(1,4:10,16:22)]
View(dataset)
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
#traindata$WINNER is the label.
nb = naiveBayes(traindata$WINNER~., data=traindata)
#use naive bayes to do prediction
pred = predict(nb, testdata,type =c("class"))
#show the result
table(pred, testdata$WINNER)
#the performance
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
names(dataset)
mean(pred==testdata$WINNER)
var(pred==testdata$WINNER)
View(dataset)
library(class)
#load the dataset
dataset = read.csv("hypothesis_testing/data_driving_predictive_models/kNNData.csv")
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
str(normalizedDataset)
summary(normalizedDataset)
preprocDataset = cbind(dataset[,1], normalizedDataset)
#10-folds-accross
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
traindata = traindataset[,c(1:4,6:15)]
testdata = testdataset[,c(1:4,6:15)]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
table(testTarget, result)
mean(testTarget==result)
var(testTarget==result)
"a"
#a
read.csv("PSPI no outliers.csv")
PSPI_no_outlier = read.csv("PSPI no outliers.csv")
summary(PSPI_no_outlier)
summary(PSPI_no_outlier[, mapply(is.numeric, PSPI_no_outlier)])
names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)]
summary(PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)],
"WINNER", "INDRANK", "INCUMBENT")])
summary(PSPI_no_outlier$WINNER)
summary(as.character(PSPI_no_outlier$WINNER))
table(as.character(PSPI_no_outlier$WINNER))
PSPI_no_outlier = read.csv("PSPI no outliers.csv")
table(as.character(PSPI_no_outlier$WINNER))
table(as.character(PSPI_no_outlier$INDRANK))
table(as.character(PSPI_no_outlier$INCUMBENT))
summary(PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
mapply(sd, PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
PSPI_no_outlier = read.csv("PSPI no outliers.csv")
table(as.character(PSPI_no_outlier$WINNER))
table(as.character(PSPI_no_outlier$INDRANK))
table(as.character(PSPI_no_outlier$INCUMBENT))
summary(PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
mapply(sd, PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
mapply(function(x){sum(is.na(x))}, PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
max(table(as.character(PSPI_no_outlier$WINNER)))
table(as.character(PSPI_no_outlier$WINNER))
table(as.character(PSPI_no_outlier$WINNER))[table(as.character(PSPI_no_outlier$WINNER)) == max(table(as.character(PSPI_no_outlier$WINNER)))]
table(as.character(PSPI_no_outlier$INDRANK))[table(as.character(PSPI_no_outlier$INDRANK)) == max(table(as.character(PSPI_no_outlier$INDRANK)))]
PSPI_no_outlier = read.csv("PSPI no outliers.csv")
table(as.character(PSPI_no_outlier$WINNER))
table(as.character(PSPI_no_outlier$INDRANK))
table(as.character(PSPI_no_outlier$INCUMBENT))
summary(PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
mapply(sd, PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
mapply(function(x){sum(is.na(x))}, PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
table(as.character(PSPI_no_outlier$OPENSECRETS.INDUSTRY))
table(as.character(PSPI_no_outlier$PRIMARY.INDUSTRY))
aa = data.frame(summary(PSPI_no_outlier[, c(names(PSPI_no_outlier)[mapply(is.numeric, PSPI_no_outlier)])])
)
View(aa)
