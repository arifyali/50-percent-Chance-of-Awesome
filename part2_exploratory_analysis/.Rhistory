setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(tree)
install.packages("tree")
library(ISLR)
library(tree)
#load the dataset
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
head(dataset)
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
tree_model = tree(traindata$WINNER~.,traindata)
?tree
dataset = dataset[order(dataset$INDRANK, decreasing = T),]
dataset = dataset[!duplicated(dataset[,c("YEAR", "STATE", "DISTRICT", "CANDIDATE")]),]
train = sample(1:nrow(dataset),nrow(dataset)*9/10)
test = -train
traindata = dataset[train,]
testdata = dataset[test,]
tree_model = tree(traindata$WINNER~.,traindata[,c("CANDTOTAL", "INCUMBENT", "WINNER", "INDRANK")])
plot(tree_model)
text(tree_model, pretty = 0)
tree_predict = predict(tree_model, testdata, type="class")
tree_model
tree_predict = predict(tree_model, testdata)
table(tree_predict, testdata$WINNER)
mean(tree_predict==testdata$WINNER)
var(tree_predict==testdata$WINNER)
tree_predict
tree_predict[tree_predict>=.5] = 1
tree_predict[tree_predict<.5] = 0
table(tree_predict, testdata$WINNER)
mean(tree_predict==testdata$WINNER)
var(tree_predict==testdata$WINNER)
cv_tree = cv.tree(tree_model, FUN = prune.misclass)
?predict
?cv.tree
cv_tree = cv.tree(tree_model, FUN = prune.tree)
#see the cv_tree's attributes
names(cv_tree)
prune_model = prune.misclass(tree_model, best = 5)
prune_model = prune.tree(tree_model, best = 5)
plot(prune_model)
text(prune_model, pretty = 0)
tree_predict_after_prune = predict(prune_model, testdata, type = "class")
tree_predict_after_prune = predict(prune_model, testdata)
table(tree_predict_after_prune, testdata$WINNER)
tree_predict_after_prune[tree_predict_after_prune<.5] = 0
tree_predict_after_prune[tree_predict_after_prune>=.5] = 1
table(tree_predict_after_prune, testdata$WINNER)
library(pROC)
testTarget = as.numeric(testdata$WINNER)
result = as.numeric(tree_predict_after_prune)
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(tree_predict_after_prune == testdata$WINNER)
var(tree_predict==testdata$WINNER)
source('~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/hypothesis_testing/data_driving_predictive_models/DT.R', echo=TRUE)
source("hypothesis_testing/data_driving_predictive_models/DT.R")
?jpeg
plot(cv_tree$size, cv_tree$dev, type = "b")
prune_model = prune.tree(tree_model, best = 3)
source("hypothesis_testing/data_driving_predictive_models/DT.R")
source("hypothesis_testing/data_driving_predictive_models/DT.R")
plot(cv_tree$size, cv_tree$dev, type = "b")
source("hypothesis_testing/data_driving_predictive_models/DT.R")
library(class)
#load the dataset
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[order(dataset$INDRANK, decreasing = T),]
dataset = dataset[!duplicated(dataset[,c("YEAR", "STATE", "DISTRICT", "CANDIDATE")]),]
normalize<-function(x){
return ((x-min(x))/(max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
str(dataset)
normalizedDataset = as.data.frame(lapply(dataset[,c(1:4,6:15)], normalize))
names(dataset)[mapply(is.numeric, dataset)]
dataset = dataset[, mapply(is.numeric, dataset)]
dataset
names(dataset)
dataset = dataset[, -c(3, 12,13,14,15,10,9,7)]
names(dataset)
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[order(dataset$INDRANK, decreasing = T),]
dataset = dataset[!duplicated(dataset[,c("YEAR", "STATE", "DISTRICT", "CANDIDATE")]),]
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[, -c(2,3, 12,13,14,15,10,9,7)]
names(dataset)
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
?knn
names(testdata)
names(testdataset)
result = knn(train = traindata, test = testdata[,-5], cl = traindataset$WINNER, k = 24)
dataset = dataset[complete.cases(dataset),]
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
result = knn(train = traindata, test = testdata[,-5], cl = traindataset$WINNER, k = 24)
View(traindata)
View(traindataset)
result = knn(train = traindata, test = testdata[,-5], cl = as.factor(traindataset$WINNER), k = 24)
result = knn(train = traindata, test = testdata[,-5], cl = as.factor(traindataset$WINNER), k = 5)
result = knn(train = traindata, test = testdata, cl = as.factor(traindataset$WINNER), k = 5)
traindataset$WINNER
as.factor(traindataset$WINNER)
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
sqrt(569)
result = knn(train = traindata, test = testdata, cl = trainTarget, k = 24)
result = knn(train = traindata[,-5], test = testdata[,-5], cl = trainTarget, k = 24)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(testTarget==result)
var(testTarget==result)
result = knn(train = traindata[,-5], test = testdata[,-5], cl = trainTarget, k = 7)
sum(is.na(result))
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(testTarget==result)
var(testTarget==result)
names(traindataset)
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,c(-1)]
testdataset = dataset[test,c(-1)]
trainTarget = traindataset[, 4]
testTarget = testdataset[, 4]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindata[,-4], test = testdata[,-4], cl = trainTarget, k = 7)
trainTarget
View(traindata[,-4])
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,c(-1)]
testdataset = dataset[test,c(-1)]
trainTarget = traindataset[, 4]
testTarget = testdataset[, 4]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindataset[,-4], test = testdataset[,-4], cl = trainTarget, k = 7)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(testTarget==result)
var(testTarget==result)
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
#choose sqrt(569) as the k
sqrt(569)
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = 7)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(testTarget==result)
var(testTarget==result)
result
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
mean(testTarget==result)
var(testTarget==result)
for(i in 1:20){
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = 7)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
print(mean(testTarget==result))
var(testTarget==result)}
for(i in 1:20){
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = i)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
print(mean(testTarget==result))
var(testTarget==result)}
for(i in 1:20{
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = i)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
print(mean(testTarget==result))
var(testTarget==result)}
for(i in 1:20){
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = i)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
plot(myROC)
print(mean(testTarget==result))
var(testTarget==result)}
names(dataset)
library(class)
#load the dataset
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[order(dataset$INDRANK, decreasing = T),]
dataset = dataset[!duplicated(dataset[,c("YEAR", "STATE", "DISTRICT", "CANDIDATE")]),]
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[, -c(2,3, 12,13,14,15,10,9,7)]
#10-folds-accross
#for(k in 1:20){
for(i in 1:3){
train = sample(1:nrow(dataset),nrow(dataset)*2/3)
test = -train
traindataset = dataset[train,]
testdataset = dataset[test,]
trainTarget = traindataset[, 5]
testTarget = testdataset[, 5]
# Determined k should be 17 after benchmarking K values between 1 and 20
result = knn(train = traindataset[,-5], test = testdataset[,-5], cl = trainTarget, k = 17)
table(testTarget, result)
library(pROC)
testTarget = as.numeric(testTarget)
result = as.numeric(result)-1
myROC = roc(testTarget,result, direction="<", auc=TRUE, ci=TRUE)
jpeg(paste0("hypothesis_testing/data_driving_predictive_models/KNN ROC validation ", i, ".jpeg", sep=""))
plot(myROC)
dev.off()
print(mean(testTarget==result))
print(var(testTarget==result))
}
library(e1071)
#load the dataset
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[order(dataset$INDRANK, decreasing = T),]
dataset = dataset[!duplicated(dataset[,c("YEAR", "STATE", "DISTRICT", "CANDIDATE")]),]
#bin the data
x = dataset[, 2]
industryPercentLevel = cut(x, b=6, labels=c(1:6))
dataset = cbind(dataset, industryPercentLevel)
x = dataset[, 3]
candTotalLevel = cut(x, b=10, labels = c(1:10))
dataset = cbind(dataset, candTotalLevel)
