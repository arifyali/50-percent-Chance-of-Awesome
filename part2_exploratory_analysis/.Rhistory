}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
function_evaluation = function(x1, x2){
fun = function(t){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(x1, x2){
fun = function(t){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(x1, x2){
fun = function(t){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
function_evaluation = function(t){
fun = function(x1,x2){
return(t*(3*x1^2-2*x1*x2+3*x2^2)-
log(x1)-log(x2)-
log(1-x1)-log(1-x2))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x1,x2){
return(
c(t*(6*x1-2*x2)-1/x1-1/(x1-1),
t*(6*x2-2*x1)-1/x2-1/(x2-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x1,x2){
return(matrix(
c(6*t+1/x1^2+1/(x1-1)^2,
-2*t,
-2*t,
6*t+1/x2^2+1/(x2-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
df(b_init)
function_evaluation = function(t){
fun = function(x){
return(t*(3*x[1]^2-2*x[1]*x[2]+3*x[2]^2)-
log(x[1])-log(x[2])-
log(1-x[1])-log(1-x[2]))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x){
return(
c(t*(6*x[1]-2*x[2])-1/x[1]-1/(x[1]-1),
t*(6*x[2]-2*x[1])-1/x[2]-1/(x[2]-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x){
return(matrix(
c(6*t+1/x[1]^2+1/(x[1]-1)^2,
-2*t,
-2*t,
6*t+1/x[2]^2+1/(x[2]-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
f = function_evaluation(1)
df = gradient_evaluation(1)
d2f = hessian_evaluation(1)
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b_init
b_new
b_new = list(b_new))
b_new = list(b_new)
b_new
b_new = list(b_new,2:100)
?list
b = as.list(1:100)
b[[1]] = b_new
b_new = b
b_new
b = as.list(1:100)
b[[1]]
b[[1]] = b_new
b[[1]]
b = list(1:100)
b = as.list(1:100)
b[[1]] = b_new
b_new = b
b[[1]]
b = as.list(1:100)
b[[1]][1] = b_new
b = list(b_new)
b[[2]] = 1
b
function_evaluation = function(t){
fun = function(x){
return(t*(3*x[1]^2-2*x[1]*x[2]+3*x[2]^2)-
log(x[1])-log(x[2])-
log(1-x[1])-log(1-x[2]))
}
return(fun)
}
gradient_evaluation = function(t){
fun = function(x){
return(
c(t*(6*x[1]-2*x[2])-1/x[1]-1/(x[1]-1),
t*(6*x[2]-2*x[1])-1/x[2]-1/(x[2]-1))
)
}
return(fun)
}
hessian_evaluation = function(t){
fun = function(x){
return(matrix(
c(6*t+1/x[1]^2+1/(x[1]-1)^2,
-2*t,
-2*t,
6*t+1/x[2]^2+1/(x[2]-1)^2),
nrow = 2,
ncol = 2
)
)
}
return(fun)
}
### Part B
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:15)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b_new
as.list(b_new)
b_new = list(b_new)
b_new
b_new[[2]] = c(1,1)
b_new
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:5)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
backtracking = function(f,x0,df0,dx,a,b){
t = 1
while(f(x0 + t * dx) > f(x0) + (a*t*df0%*%dx)){
t = b*t
#print(c(t,f(x0 + t * dx),f(x0) + (a*t*df0%*%dx)));
}
return(x0+t*dx)
}
t = 1
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=c(.5,.5)
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:14)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b = list(b_new)
### Part C
for(t in 2:100){
f = function_evaluation(t)
df = gradient_evaluation(t)
d2f = hessian_evaluation(t)
b_init=b[[t-1]]
b_new=backtracking(f,b_init,df(b_init),solve(d2f(b_init),(-df(b_init))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c()
for(i in  1:4)
{
b_new=backtracking(f,b_new,df(b_new),solve(d2f(b_new),(-df(b_new))),0.25,0.5)
b_init = rbind(b_init, b_new)
residual_log = c(residual_log,
sqrt((b_new[1]-b_init[(nrow(b_init)-1),1])^2+(b_new[2]-b_init[(nrow(b_init)-1),2])^2))
}
b[[t]] = b_new
}
plot(b)
sapply(b, function(x){x[1]})
sapply(b, function(x){x[2]})
?plot
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}), xlab = "x", ylab = "y", type = "l")
plot(c(0,1),c(0,1), xlab = "x1", ylab = "x2")
lines(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}))
?lines
plot(sapply(b, function(x){x[1]}), sapply(b, function(x){x[1]}),xlim = c(0,2), ylim = c(0,2), xlab = "x1", ylab = "x2")
rect(0,0,1,1)
?lines
lines(c(0, .5), c(.5,.5))
lines(c(0, 1), c(.5,.5))
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
setwd("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/")
GS2002 = read.csv("ChiharaHesterberg/GSS2002.csv")
X2GE = chisq.test(table(GS2002[,c("Gender", "Education")]))
X2GE$p.value
X2GE$parameter == prod(dim(table(GS2002[,c("Gender", "Education")]))-1)
X2HP = chisq.test(table(GS2002[,c("Happy", "PolParty")]))
X2HP$p.value
#X2HP$stdres
#X2HP$residuals
X2HP$parameter == prod(dim(table(GS2002[,c("Happy", "PolParty")]))-1)
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
setwd("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/")
GS2002 = read.csv("ChiharaHesterberg/GSS2002.csv")
X2GE = chisq.test(table(GS2002[,c("Gender", "Education")]))
X2GE$p.value
X2GE$parameter == prod(dim(table(GS2002[,c("Gender", "Education")]))-1)
X2HP$p.value
X2HP$stdres
load("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/hw8.RData")
mytable = table(Problem59)
expected = outer(rowSums(mytable), colSums(mytable))/sum(mytable)
myX2 <- function(table){sum((table - expected)^2/expected)}
X2 <- myX2(mytable)
X2permuted = function(dummy){
n <- nrow(Problem59)
permtable <- table(Problem59$X,Problem59$Y[sample(n,n,replace = F)])
return(myX2(permtable))
}
z <- replicate(10000,X2permuted(0))
hist(z)
abline(v = X2, , col = 2, lwd = 2)
mean(z > X2)
mean(z)
names(Problem59)
View(Problem59)
View(Problem59)
abline(v = X2, col = 2, lwd = 2)
mytable = table(Problem59)
mytable
X2HP$stdres
X2HP$residuals
z <- replicate(100000, mean(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T)))
median(z)
quantile(Bangladesh$Arsenic, c(0.5, .90))
median(Bangladesh$Arsenic)
quantile(Bangladesh$Arsenic, c(.9))
quantile(z, c(.9))
X2HP$stdres
?lm
?Logistic
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
z <- replicate(100000, mean(sample(Bangladesh$Chlorine,length(Bangladesh$Chlorine), replace = T)))
quantile(z, c(0.05, 0.95), na.rm = T)
political_data = read.csv("OpenSecretsFECIndustry")
View(political_data)
median(z)-quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
median(z)
median(z, na.rm = T)-quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
quantile(z,c(.9) na.rm = T)-quantile(Bangladesh$Arsenic, c(0.5, .90))[2]
quantile(z,c(.9), na.rm = T)-quantile(Bangladesh$Arsenic, c(0.5, .90))[2]
sum(is.na(political_data$INCUMBENT))
length(unique(political_data$CANDIDATE[is.na(political_data$INCUMBENT)]))
(138-64)/202
pchisq(27, 3)
pchisq(27, 2)
pchisq(27, 4)
pchisq(27, 5)
141.5363+64.4637
141.5363+64.4637/2
141.5363+64.4637
z <- replicate(100000, mean(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T, na.rm = T)))
z <- replicate(100000, mean(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T), na.rm = T))
mean(z)
sd(z)
hist(z, breaks = 50)
boxplot(z)
quantile(Bangladesh$Arsenic, c(0.5, .90))
median(z, na.rm = T)-quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
quantile(z,c(.9), na.rm = T)-quantile(Bangladesh$Arsenic, c(0.5, .90))[2]
View((GS2002[,c("Happy", "PolParty")]))
X2HP$expected
boxplot(Bangladesh$Chlorine, na.rm = T)
hist(Bangladesh$Chlorine, na.rm = T)
mean(Bangladesh$Chlorine, na.rm = T)
mytable = table(Problem59)
mytable
mytable = table(Problem59)
expected = outer(rowSums(mytable), colSums(mytable))/sum(mytable)
myX2 <- function(table){sum((table - expected)^2/expected)}
X2 <- myX2(mytable)
X2permuted = function(dummy){
n <- nrow(Problem59)
permtable <- table(Problem59$X,Problem59$Y[sample(n,n,replace = F)])
return(myX2(permtable))
}
z <- replicate(10000,X2permuted(0))
hist(z)
abline(v = X2, col = 2, lwd = 2)
mean(z > X2)
mean(z)
?pchisq
pchisq(.95,1)
z <- replicate(100000, (sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T), na.rm = T))
z <- replicate(100000, (sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T)))
median(mapply(median, z))
mean(mapply(median, z))
z <- replicate(10000, median(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T)))
mean(z)-quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
z <- replicate(10000, quantile(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T),c(0.9)))
mean(z)-quantile(Bangladesh$Arsenic, c(0.5, .90))[2]
z <- replicate(10000, median(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T)))
mean(z)-quantile(Bangladesh$Arsenic, c(0.5, .90))[1]
mean(z)
z <- replicate(10000, quantile(sample(Bangladesh$Arsenic,length(Bangladesh$Arsenic), replace = T),c(0.9)))
mean(z)-quantile(Bangladesh$Arsenic, c(0.5, .90))[2]
qchisq(.95, 1)
pchisq(.95,1)
dchisq(.95,1)
qchisq(.95,1)
qchisq(.05)
qchisq(.05,1)
qchisq(.05,1, lower.tail = T)
qchisq(.05,1, lower.tail = F)
Bangladesh_Chlorine = na.omit(Bangladesh$Chlorine)
boxplot(Bangladesh_Chlorine)
hist(Bangladesh_Chlorine)
mean(Bangladesh_Chlorine)
sd(Bangladesh_Chlorine)/sqrt(length(Bangladesh_Chlorine))
@
z <- replicate(100000, mean(sample(Bangladesh_Chlorine,length(Bangladesh_Chlorine), replace = T)))
quantile(z, c(0.05, 0.95), na.rm = T)
sum(is.na(Bangladesh$Arsenic))
