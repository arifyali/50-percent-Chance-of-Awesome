library(ISLR)
install.packages("tree")
library(dbscan)
dataset = read.csv("./breast-cancer.csv")
dataset = dataset[2:30]
eps = 0.5
setwd("~/Documents/GU/course/IntroToDataAnalysis/50-percent-Chance-of-Awesome/part2_exploratory_analysis/Clustering")
library(dbscan)
dataset = read.csv("./breast-cancer.csv")
dataset = dataset[2:30]
eps = 0.5
MinPts = 5
db <- dbscan(dataset, eps=.4, minPts=3)
db
plot(dataset, col=db$cluster+1L)
summary(db)
dataset = read.csv("./breast-cancer.csv")
View(dataset)
View(dataset)
dataset = dataset[2:15]
View(dataset)
View(dataset)
eps = 0.5
MinPts = 5
db <- dbscan(dataset, eps=.4, minPts=3)
db
summary(db)
plot(dataset, col=db$cluster+1L)
db <- dbscan(dataset, eps=.4, minPts=3, method = "dist")
db = dbscan(dataset, eps=.4, minPts=3)
db
summary(db)
plot(dataset, col=db$cluster+1L)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data_with_outliers = read.csv("PoldataSPIndustries.csv")
political_data = political_data[order(political_data$INDRANK, decreasing = T), ]
i =2004
numeric_political_data = political_data[!duplicated(political_data[,c("CANDIDATE", "PARTY")]) & political_data$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","INDRANK")]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
print(nrow(numeric_political_data))
#numeric_political_data = political_data[, numeric_characters]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
numeric_political_data = numeric_political_data[sample(nrow(numeric_political_data), 50), ]
Political_hclustering = hclust(dist(numeric_political_data))
numeric_political_data_outlier = political_data_with_outliers[!duplicated(political_data_with_outliers[,c("CANDIDATE", "PARTY")])
& political_data_with_outliers$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","indrank")]
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
print(nrow(numeric_political_data_outlier))
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
numeric_political_data_outlier = numeric_political_data_outlier[sample(nrow(numeric_political_data_outlier), 50), ]
numeric_political_data_outliernumeric_political_data_outlier = hclust(dist(numeric_political_data_outlier))
plot(Political_hclustering, labels = numeric_political_data$CANDIDATE, main = "No Outliers")
plot(numeric_political_data_outlier, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers")
numeric_political_data_outlier_cluster = hclust(dist(numeric_political_data_outlier))
plot(numeric_political_data_outlier_cluster, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers")
par(mfrow=c(1,2))
plot(Political_hclustering, labels = numeric_political_data$CANDIDATE, main = "No Outliers")
plot(numeric_political_data_outlier_cluster, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers")
par(mfrow=c(1,2))
plot(Political_hclustering, labels = numeric_political_data$CANDIDATE, main = "No Outliers", cex = 0.5)
plot(numeric_political_data_outlier_cluster, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers", cex = 0.5)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data_with_outliers = read.csv("PoldataSPIndustries.csv")
political_data = political_data[order(political_data$INDRANK, decreasing = T), ]
### Hierarchical clustering ###
for(i in c(2004, 2006, 2008, 2010, 2012, 2014)){
numeric_political_data = political_data[!duplicated(political_data[,c("CANDIDATE", "PARTY")]) & political_data$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","INDRANK")]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
print(nrow(numeric_political_data))
#numeric_political_data = political_data[, numeric_characters]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
numeric_political_data = numeric_political_data[sample(nrow(numeric_political_data), 50), ]
Political_hclustering = hclust(dist(numeric_political_data))
numeric_political_data_outlier = political_data_with_outliers[!duplicated(political_data_with_outliers[,c("CANDIDATE", "PARTY")])
& political_data_with_outliers$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","indrank")]
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
print(nrow(numeric_political_data_outlier))
#numeric_political_data = political_data[, numeric_characters]
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
numeric_political_data_outlier = numeric_political_data_outlier[sample(nrow(numeric_political_data_outlier), 50), ]
numeric_political_data_outlier_cluster = hclust(dist(numeric_political_data_outlier))
png(paste("Clustering/hcluster_", i, ".png", sep = ""), width = 755, height = 1200)
par(mfrow=c(1,2))
plot(Political_hclustering, labels = numeric_political_data$CANDIDATE, main = "No Outliers", cex = 0.5)
plot(numeric_political_data_outlier_cluster, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers", cex = 0.5)
dev.off()
}
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data_with_outliers = read.csv("PoldataSPIndustries.csv")
political_data = political_data[order(political_data$INDRANK, decreasing = T), ]
### Hierarchical clustering ###
for(i in c(2004, 2006, 2008, 2010, 2012, 2014)){
numeric_political_data = political_data[!duplicated(political_data[,c("CANDIDATE", "PARTY")]) & political_data$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","INDRANK")]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
print(nrow(numeric_political_data))
#numeric_political_data = political_data[, numeric_characters]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),]
numeric_political_data = numeric_political_data[sample(nrow(numeric_political_data), 50), ]
Political_hclustering = hclust(dist(numeric_political_data))
numeric_political_data_outlier = political_data_with_outliers[!duplicated(political_data_with_outliers[,c("CANDIDATE", "PARTY")])
& political_data_with_outliers$YEAR==i,
c("CANDIDATE","CANDTOTAL", "VOTES","indrank")]
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
print(nrow(numeric_political_data_outlier))
#numeric_political_data = political_data[, numeric_characters]
numeric_political_data_outlier = numeric_political_data_outlier[complete.cases(numeric_political_data_outlier),]
numeric_political_data_outlier = numeric_political_data_outlier[sample(nrow(numeric_political_data_outlier), 50), ]
numeric_political_data_outlier_cluster = hclust(dist(numeric_political_data_outlier))
png(paste("Clustering/hcluster_", i, ".png", sep = ""), width = 902, height = 700)
par(mfrow=c(1,2))
plot(Political_hclustering, labels = numeric_political_data$CANDIDATE, main = "No Outliers", cex = 0.5)
plot(numeric_political_data_outlier_cluster, labels = numeric_political_data_outlier$CANDIDATE, main = "With Outliers", cex = 0.5)
dev.off()
}
?dist
setwd("Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
dataset = read.csv("PoldataSPIndustriesStockData.csv")
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[complete.cases(dataset),]
names(dataset)
db = dbscan(dataset, eps=.4, minPts=5)
library(dbscan)
db = dbscan(dataset, eps=.4, minPts=5)
db
summary(db)
png("Clustering/db scan cluster no outliers.png")
plot(dataset, col=db$cluster+1L)
dev.off()
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[complete.cases(dataset),]
dataset = dataset[sample(nrow(dataset), 5000), c("INDUSTRYPERCENT", "PERCENT", "YrPercentChange", "WINNER", "INCUMBENT")]
db = dbscan(dataset, eps=.4, minPts=5)
db
summary(db)
png("Clustering/db scan cluster with outliers.png")
plot(dataset, col=db$cluster+1L)
dev.off()
library(dbscan)
setwd("Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
dataset = read.csv("PoldataSPIndustriesStockData.csv")
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[complete.cases(dataset),]
dataset = dataset[sample(nrow(dataset), 5000), c("INDUSTRYPERCENT", "PERCENT", "YrPercentChange", "WINNER", "INCUMBENT")]
db = dbscan(dataset, eps=.4, minPts=5)
db
summary(db)
plot(dataset, col=db$cluster+1L)
## for dbscan, we focused on percentages and looked at stock data as well
library(dbscan)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
dataset = read.csv("PoldataSPIndustriesStockData.csv")
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[complete.cases(dataset),]
dataset = dataset[sample(nrow(dataset), 5000), c("INDUSTRYPERCENT", "PERCENT", "YrPercentChange", "WINNER", "INCUMBENT")]
db = dbscan(dataset, eps=.4, minPts=5)
db
summary(db)
png("Clustering/db scan cluster no outliers.png")
plot(dataset, col=db$cluster+1L)
dev.off()
dataset = read.csv("PoldataSPIndustriesStockData no outliers.csv")
dataset = dataset[, mapply(is.numeric, dataset)]
dataset = dataset[complete.cases(dataset),]
dataset = dataset[sample(nrow(dataset), 5000), c("INDUSTRYPERCENT", "PERCENT", "YrPercentChange", "WINNER", "INCUMBENT")]
db = dbscan(dataset, eps=.4, minPts=5)
db
summary(db)
png("Clustering/db scan cluster with outliers.png")
plot(dataset, col=db$cluster+1L)
dev.off()
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
View(political_data)
View(political_data)
political_data = political_data[order(political_data$CANDTOTAL, decreasing = T),]
View(political_data)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data = political_data[order(political_data$CANDTOTAL, decreasing = T),]
View(political_data)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data = political_data[order(political_data$INDRANK, decreasing = T),]
View(political_data)
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/part2_exploratory_analysis/")
political_data= read.csv("PSPI no outliers.csv")
political_data = political_data[order(political_data$INDRANK, decreasing = T),]
# Focusing on the no outlier dataset first
### K-means ###
numeric_political_data = political_data[!duplicated(political_data[, c("DISTRICT", "CANDIDATE", "YEAR")]), ]
numeric_political_data = numeric_political_data[complete.cases(numeric_political_data),c("CANDTOTAL", "VOTES", "INDRANK")]
#### Check difference in winner/loser and incumbent/challenger
library(cluster)
political_centers = kmeans(numeric_political_data, 2)
political_data_with_clusters = cbind(numeric_political_data, cluster = political_centers$cluster)
png("Clustering/kmeans political centers or incumbents vs challengers.png")
clusplot(political_data_with_clusters, political_data_with_clusters$cluster,
color = T, shade = T, labels = 2, lines = 0)
dev.off()
political_centers = kmeans(numeric_political_data, 4)
political_data_with_clusters = cbind(numeric_political_data, cluster = political_centers$cluster)
png("Clustering/kmeans political centers with incumbents vs challengers and winners vs losers.png")
clusplot(political_data_with_clusters, political_data_with_clusters$cluster,
color = T, shade = T, labels = 2, lines = 0)
dev.off()
hist(numeric_political_data$INDRANK)
