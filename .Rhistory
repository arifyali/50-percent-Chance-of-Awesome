Z[i,j] = v1range[i]*x+v2range[j]*y-c;
}
}
return(Z);
}
res=2;
v1range=seq(-10,10,length=res);
v2range=seq(-10,10,length=res);
vbz = c(0,0, 0, 2)
phase1_closure = function(t,x,c) {
f = function(vbz) {
v=vbz[1:(length(vbz)-2)];
b=vbz[length(vbz)-1];
z = vbz[length(vbz)]
return(t*z-sum(log(-(1-c*(v%*%x-b)-z))));
}
return(f);
}
phase1_gradient_closure = function(t,x,c) {
df = function(vbz) {
v = vbz[1:(length(vbz)-2)];
b = vbz[length(vbz)-1];
z = vbz[length(vbz)]
fracs = c/(1-c*(t(x)%*%v-b)-z);
#    print(dim(fracs))
denom = 1/(1-c*(t(x)%*%v-b)-z)
return(c(t*v+(x%*%fracs),sum(fracs),t-sum(denom)));
}
return(df);
}
## Work on phase1 hessian closue
phase1_hessian_closure = function(t,x,c) {
d2f = function(vbz) {
v = vbz[1:(length(vbz)-2)];
b = vbz[length(vbz)-1];
z = vbz[length(vbz)]
fracs = (c/(1-c*(t(x)%*%v-b)-z)^2);
D = matrix(0,length(c),length(c));
for (i in 1:length(c)) {
D[i,i]=fracs[i];
}
Xp = rbind(x,rep(-1,length(c)), 1/c) %*% D;
Z = (Xp %*% t(Xp))
return(Z);
}
return(d2f);
}
backtracking = function(f,x0,df0,dx,a,c){
t = 1
f0 = f(x0)
delta = t(df0)%*%dx
while (is.nan(f(x0+t*dx)) || f(x0+t*dx) > f0+a*t*delta){
t = t*c
}
return (x0+t*dx)
}
t=1
c = c(rep(-1,12),rep(1,12));
X = rbind(runif(24,min=0,max=1)+2*c,runif(24,min=0,max=1)+2*c);
plot(X[1,1:12],X[2,1:12],col='red',xlab='x',ylab='y',xlim=c(-3,3),ylim=c(-3,3));
points(X[1,13:24],X[2,13:24],col='blue');
lines(c(-5,5),c(5,-5));
p=c(1,1)*sqrt(2)/2;
im = which.max(p%*%X[,1:12]);
improj = X[,im]-(p%*%X[,im])*p;
ip = which.min(p%*%X[,13:24]);
ipproj =X[,ip+12]-(p%*%X[,ip+12])*p;
lines(c(improj[1],X[1,im]),c(improj[2],X[2,im]),lty=2)
lines(c(ipproj[1],X[1,ip+12]),c(ipproj[2],X[2,ip+12]),lty=2)
f = phase1_closure(t,X,c);
df = phase1_gradient_closure(t,X,c);
d2f = phase1_hessian_closure(t,X,c);
vbz.list = list(vbz)
i = 2
while(tail(vbz, n=1)>=0) {
print(vbz)
vbz = backtracking(f,vbz,df(vbz),solve(d2f(vbz),-df(vbz)),0.01,0.5);
vbz.list[[i]] = vbz
i = i + 1
#print(vbz)
}
xbnds = c(-5,5);
ybnds = (vbz[3]-(vbz[1]*xbnds))/vbz[2];
lines(xbnds,ybnds,lty=2,col='blue')
mu = 2;
t = 1;
vb = vbz.list[[length(vbz.list)-1]][1:3];
svm_closure = function(t,x,c) {
f = function(vb) {
v=vb[1:length(vb)-1];
b=vb[length(vb)];
return(t*sum(v^2)/2-sum(log(-(1-c*(v%*%x-b)))));
}
return(f);
}
svm_gradient_closure = function(t,x,c) {
df = function(vb) {
v=vb[1:length(vb)-1];
b=vb[length(vb)];
fracs = c/(1-c*(t(x)%*%v-b));
return(c(t*v+(x%*%fracs),-sum(fracs)));
}
return(df);
}
svm_hessian_closure = function(t,x,c) {
d2f = function(vb) {
v=vb[1:length(vb)-1];
b=vb[length(vb)];
Z = matrix(0,length(v)+1,length(v)+1);
for (i in 1:length(v)) {
Z[i,i] = t;
}
fracs = c/(1-c*(t(x)%*%v-b));
D = matrix(0,length(c),length(c));
for (i in length(c)) {
D[i,i]=fracs[i];
}
Xp = rbind(x,rep(-1,length(c))) %*% D;
Z = Z+(Xp %*% t(Xp));
return(Z);
}
return(d2f);
}
# Initalize
f = svm_closure(t,X,c);
df = svm_gradient_closure(t,X,c);
d2f = svm_hessian_closure(t,X,c);
for (i in 1:15) {
vb = backtracking(f,vb,df(vb),solve(d2f(vb),-df(vb)),0.01,0.5);
print(f(vb))
print(vb)
}
# Now begin the path
for (i in 1:10) {
t = mu*t;
f = svm_closure(t,X,c);
df = svm_gradient_closure(t,X,c);
d2f = svm_hessian_closure(t,X,c);
for (i in 1:5) {
vb = backtracking(f,vb,df(vb),solve(d2f(vb),-df(vb)),0.01,0.5);
}
print(vb[1]^2+vb[2]^2)
print(vb)
}
xbnds = c(-5,5);
ybnds = (vb[3]-(vb[1]*xbnds))/vb[2];
lines(xbnds,ybnds,lty=2,col='green')
matrix(c(1,2,3,4), 2)
library(e1071)
load("Dropbox/School/Georgetown/Analytics 561 Fall 2015/HW07/mnist01_testX.Rdata")
load("Dropbox/School/Georgetown/Analytics 561 Fall 2015/HW07/mnist01_testy.Rdata")
m=svm(testX,testy,kernel='linear')
filled.contour(matrix(t(m$coefs) %*% m$SV,nrow=28,ncol=28),col=heat.colors(10),nlevels=10)
## Part B ##
p=predict(m,testX)
matrix(c(sum(testy[p<0]==0), sum(testy[p>0]==0),
sum(testy[p<0]==1), sum(testy[p>0]==1)),
2)
t_formula_confidence_interval = function(xhat, SD, ciLevel, sample_size){
t_score = qt(1-((1-ciLevel)/2), sample_size-1)
SE = SD/sqrt(sample_size)
return(c(xhat - t_score*SE, xhat + t_score*SE))
}
t_formula_confidence_interval(18.5, 5, .90, 20)
Spruce <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Spruce.csv")
boxplot(Spruce$Ht.change)
hist(Spruce$Ht.change, breaks = 20)
t_formula_confidence_interval(mean(Spruce$Ht.change), sd(Spruce$Ht.change), .95, length(Spruce$Ht.change))
t_formula_confidence_interval(18.5, 5, .90, 20)
?t.test
xhat = 5.8; yhat = 1.9
sdx = 8.6; sdy = 4.2
sizex = 43; sizey = 36
sdxy = sqrt(sdx^2/sizex+sdy^2/sizey)
df = (sdx^2/sizex + sdy^2/sizey)^2/
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1))
t_score = qt(1-((1-.95)/2), df)
t_score
(xhat-yhat)+c(t_score, -t_score)*sdxy
(xhat-yhat)+c(-t_score, t_score)*sdxy
df
df = ceiling((sdx^2/sizex + sdy^2/sizey)^2/
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1)))
t_score = qt(1-((1-.95)/2), df)
(xhat-yhat)+c(-t_score, t_score)*sdxy
df
Girls2004 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Girls2004.csv")
View(Girls2004)
View(Girls2004)
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"]~Girls2004$Weight[Girls2004$Smoker=="Yes"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="Yes"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="Yes"])
par(mfrow=c(1,2))
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="Yes"])
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
boxplot(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
hist(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
hist(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
hist(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker", breaks = 10)
hist(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker", breaks = 10)
qqplot(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqnorm()
?qqnorm
qqnorm(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqnorm(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
?qqline
qqline(Girls2004$Weight[Girls2004$Smoker=="No"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="No"])
qqline(Girls2004$Weight[Girls2004$Smoker=="Yes"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="No"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="Yes"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="No"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="Yes"])
xhat = mean(Girls2004$Weight[Girls2004$Smoker=="No"])
yhat = mean(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sdx = sd(Girls2004$Weight[Girls2004$Smoker=="No"])
sdy = sd(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sizex = length(Girls2004$Weight[Girls2004$Smoker=="No"])
sizey = length(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sdxy = sqrt(sdx^2/sizex+sdy^2/sizey)
df = (sdx^2/sizex + sdy^2/sizey)^2/
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1))
t_score = qt(1-((1-.95)/2), df)
(xhat-yhat)+c(-t_score, t_score)*sdxy
df
t_score = qt(1-((1-.95)/2), 15)
(xhat-yhat)+c(-t_score, t_score)*sdxy
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1))
t_score = qt(1-((1-.95)/2), df)
(xhat-yhat)+c(-t_score, t_score)*sdxy
?prop.test
GSS2002 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/GSS2002.csv")
View(GSS2002)
table(GSS2002$Pres00)
prop.test(426, 980)
prop.test(426, 980)$conf.int
prop.test(426, 980, correct = F)$conf.int
prop.test(459, 980, correct = F)$conf.int
prop.test(426, 759, correct = F)$conf.int
prop.test(459-426, 980-759,correct = F)$conf.int
prop.test(c(459,426), c(980,759),correct = F)$conf.int
@
Verizon <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Verizon.csv")
View(Verizon)
ILEC = Verizon[Verizon$Group=="ILEC",]
View(Verizon)
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
CLEC = Verizon[Verizon$Group=="CLEC","Time"]
t_formula_confidence_interval(mean(ILEC),sd(ILEC),.95,length(ILEC))
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
aa= t.test(ILEC)
aa$conf.int
CLEC = Verizon[Verizon$Group=="CLEC","Time"]
t.test(CLEC)$conf.int
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
alpha = .95
z <- replicate(10000,mean(sample(ILEC,size = length(ILEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(ILEC)$conf.int
CLEC = Verizon[Verizon$Group=="CLEC","Time"]
alpha = .95
z <- replicate(10000,mean(sample(CLEC,size = length(CLEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(CLEC)$conf.int
Girls2004 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Girls2004.csv")
xhat = mean(Girls2004$Weight[Girls2004$Smoker=="No"])
yhat = mean(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sdx = sd(Girls2004$Weight[Girls2004$Smoker=="No"])
sdy = sd(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sizex = length(Girls2004$Weight[Girls2004$Smoker=="No"])
sizey = length(Girls2004$Weight[Girls2004$Smoker=="Yes"])
sdxy = sqrt(sdx^2/sizex+sdy^2/sizey)
df = (sdx^2/sizex + sdy^2/sizey)^2/
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1))
t_score = qt(1-((1-.95)/2), df)
(xhat-yhat)-t_score*sdxy
Verizon <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Verizon.csv")
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
alpha = .95
z <- replicate(10000,mean(sample(ILEC,size = length(ILEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(ILEC)$conf.int
alpha = .95
z <- replicate(10000,mean(sample(ILEC,size = length(ILEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(ILEC)$conf.int
t.test(ILEC)$conf.int[[1]]
t.test(ILEC)$conf.int[[2]]
t.test(ILEC)$conf.int[1]
Spruce <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Spruce.csv")
boxplot(Spruce$Ht.change)
hist(Spruce$Ht.change, breaks = 20)
t_formula_confidence_interval(mean(Spruce$Ht.change), sd(Spruce$Ht.change), .95, length(Spruce$Ht.change))
t_formula_confidence_interval = function(xhat, SD, ciLevel, sample_size){
t_score = qt(1-((1-ciLevel)/2), sample_size-1)
SE = SD/sqrt(sample_size)
return(c(xhat - t_score*SE, xhat + t_score*SE))
}
t_formula_confidence_interval(18.05, 5, .90, 20)
Spruce <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Spruce.csv")
par(mfrow=c(1,2))
boxplot(Spruce$Ht.change)
hist(Spruce$Ht.change, breaks = 20)
qqnorm(Spruce$Ht.change)
qqline(Spruce$Ht.change)
Spruce <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Spruce.csv")
t_formula_confidence_interval(mean(Spruce$Ht.change), sd(Spruce$Ht.change), .95, length(Spruce$Ht.change))
xhat = 5.8; yhat = 1.9
sdx = 8.6; sdy = 4.2
sizex = 43; sizey = 36
sdxy = sqrt(sdx^2/sizex+sdy^2/sizey)
df = (sdx^2/sizex + sdy^2/sizey)^2/
((sdx^2/sizex)^2/(sizex-1)+(sdy^2/sizey)^2/(sizey-1))
t_score = qt(1-((1-.95)/2), df)
(xhat-yhat)+c(-t_score, t_score)*sdxy
par(mfrow=c(1,2))
boxplot(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
boxplot(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
hist(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker", breaks = 10)
hist(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker", breaks = 10)
qqnorm(Girls2004$Weight[Girls2004$Smoker=="No"], main = "Nonsmoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="No"])
qqnorm(Girls2004$Weight[Girls2004$Smoker=="Yes"], main = "smoker")
qqline(Girls2004$Weight[Girls2004$Smoker=="Yes"])
prop.test(459, 980, correct = F)$conf.int
prop.test(426, 759, correct = F)$conf.int
prop.test(c(459,426), c(980,759),correct = F)$conf.int
Verizon <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Verizon.csv")
ILEC = Verizon[Verizon$Group=="ILEC","Time"]
alpha = .95
z <- replicate(10000,mean(sample(ILEC,size = length(ILEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(ILEC)$conf.int
9.117945-7.705276
9.144520-7.729224
1.412669>1.415296
CLEC = Verizon[Verizon$Group=="CLEC","Time"]
alpha = .95
z <- replicate(10000,mean(sample(CLEC,size = length(CLEC), replace = T)))
# confidence interval
quantile(z,c((1-alpha)/2,(1+alpha)/2))
t.test(CLEC)$conf.int
length(CLEC)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
update.packages(repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("caret", "class", "curl", "foreign", "jsonlite", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "Rcpp", "spatial", "stringi", "testthat"))
update.packages(repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
Sodor.kidstemp = c(98.0, 98.9, 99.0, 98.9, 98.8, 98.6, 99.1, 98.9, 98.5, 98.9, 98.9, 98.4, 99.0, 99.2, 98.6, 98.8, 98.9, 98.7)
mean(Sodor.kidstemp)
sd(Sodor.kidstemp)
t = (mean(Sodor.kidstemp)-98.6)/
(sd(Sodor.kidstemp)/sqrt(length(Sodor.kidstemp)))
t
qt(t, df = length(Sodor.kidstemp)-1)
pt(t, df = length(Sodor.kidstemp)-1)
pt(t, df = length(Sodor.kidstemp)-1, lower.tail = F)
?qt
Sodor.kidstemp.ci = replicate(10000, mean(sample(Sodor.kidstemp, length(Sodor.kidstemp), replace = T)))
quantile(Sodor.kidstemp.ci, c(0.025,0.975))
?prop.test
prop.test(c(28,13), c(250, 250), correct = F)
prop.test(c(28,13), c(250, 250), correct = F, alternative = "less")
prop.test(c(28,13), c(250, 250), correct = F, alternative = "greater")
choose(12,1)
(0.3)^0*(1-0.3)^12+12*(0.3)^1*(1-0.3)^11
corrExerciseA <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/corrExerciseA.csv")
View(corrExerciseA)
plot(corrExerciseA$X, corrExerciseA$Y)
cor(corrExerciseA$X, corrExerciseA$Y)
plot(Y~X, data = corrExerciseA)
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="A",])
plot(Y~X,
data = corrExerciseA[corrExerciseA$Z=="B",])
cor(corrExerciseA[corrExerciseA$Z=="A","X"],
corrExerciseA[corrExerciseA$Z=="A","Y"])
cor(corrExerciseA[corrExerciseA$Z=="B","X"],
corrExerciseA[corrExerciseA$Z=="B","Y"])
cor(corrExerciseA[corrExerciseA$Z=="B","X"],
corrExerciseA[corrExerciseA$Z=="B","Y"]) -
cor(corrExerciseA[corrExerciseA$Z=="A","X"],
corrExerciseA[corrExerciseA$Z=="A","Y"])
cor(corrExerciseA[corrExerciseA$Z=="B","X"],
corrExerciseA[corrExerciseA$Z=="B","Y"]) +
cor(corrExerciseA[corrExerciseA$Z=="A","X"],
corrExerciseA[corrExerciseA$Z=="A","Y"])
NCBirths2004 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/NCBirths2004.csv")
View(NCBirths2004)
names(NCBirths2004)
plot(Weight~Gestation, data = NCBirths2004)
cor(Weight~Gestation, data = NCBirths2004)
cor(NCBirths2004$Weight, NCBirths2004$Gestation)
lm(Weight~Gestation, data = NCBirths2004)
summary(lm(Weight~Gestation, data = NCBirths2004))
aa = summary(lm(Weight~Gestation, data = NCBirths2004))
aa$r.squared
part_b = lm(Weight~Gestation, data = NCBirths2004)
part_b$coefficients
summary(part_b)$r.squared
pt((mean(Sodor.kidstemp)-98.6)/
(sd(Sodor.kidstemp)/sqrt(length(Sodor.kidstemp))),
df = length(Sodor.kidstemp)-1, lower.tail = F)
Sodor.kidstemp = c(98.0, 98.9, 99.0, 98.9, 98.8,
98.6, 99.1, 98.9, 98.5, 98.9,
98.9, 98.4, 99.0, 99.2, 98.6,
98.8, 98.9, 98.7)
pt((mean(Sodor.kidstemp)-98.6)/
(sd(Sodor.kidstemp)/sqrt(length(Sodor.kidstemp))),
df = length(Sodor.kidstemp)-1, lower.tail = F)
Sodor.kidstemp.ci = replicate(10000, mean(sample(Sodor.kidstemp, length(Sodor.kidstemp), replace = T)))
quantile(Sodor.kidstemp.ci, c(0.025,0.975))
Maunaloa <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Maunaloa.csv")
plot(Level~Year, data = Maunaloa)
Maunaloa.lm = lm(Level~Year, data = Maunaloa)
Maunaloa.lm$coefficients
plot(Maunaloa.lm$residuals, Maunaloa$Year)
Volleyball2009 <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Volleyball2009.csv")
View(Volleyball2009)
plot(Kills~Assts)
plot(Kills~Assts, data = Volleyball2009)
lm(Kills~Assts, data = Volleyball2009)
lm(Kills~Assts, data = Volleyball2009)$Coefficients
aa = lm(Kills~Assts, data = Volleyball2009)
aa$coefficients
summary(lm(Kills~Assts, data = Volleyball2009)$coefficients)
summary(lm(Kills~Assts, data = Volleyball2009))
summary(lm(Kills~Assts, data = Volleyball2009))$r.squared
part_b = lm(Kills~Assts, data = Volleyball2009)
part_b$coefficients
summary(part_b)$r.squared
plot(Volleyball2009$Assts, part_b$residuals)
part_b = lm(Kills~Assts, data = Volleyball2009)
part_b$coefficients
summary(part_b)$r.squared
plot(Volleyball2009$Assts, resid(part_b), ylab = "Residuals")
abline(h=0)
?smooth.spline
lines(smooth.spline(Volleyball2009$Assts, resid(part_b), df = 3),
col="blue")
power = function(p){
1-((p)^0*(1-p)^12+12*(p)^1*(1-p)^11)
}
seq(0,1,0.01)
x = seq(0,1,0.01)
plot(x, power(x))
p = seq(0,1,0.01)
plot(p, power(p))
p = seq(0,.3,0.01)
plot(p, power(p))
?pbinom
pbinom(0,12,0.3)
(1-.3)^12
power(0)
power(1)
p = seq(0,.3,0.01)
plot(p, 1-power(p))
Alelager <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Alelager.csv")
View(Alelager)
cor(Alelager$Alcohol, Alelager$Calories)
View(Alelager)
sample(Alelager$Alcohol, length(Alelager$Alcohol))
sample(Alelager$Calories, length(Alelager$Calories))
cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories)))
cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories)))
cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories)))
Alelager.bootstrap.ci = replicate(10000, cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories))))
quantile(Alelager.bootstrap.ci, c(0.025, .975))
Alelager <- read.csv("~/Dropbox/School/Georgetown/Analytics 511 Fall 2015/ChiharaHesterberg/Alelager.csv")
cor(Alelager$Alcohol, Alelager$Calories)
Alelager.bootstrap.ci = replicate(10000, cor(sample(Alelager$Alcohol, length(Alelager$Alcohol)), sample(Alelager$Calories, length(Alelager$Calories))))
quantile(Alelager.bootstrap.ci, c(0.025, .975))
p = seq(0,.3,0.01)
plot(p, 1-power(p))
tail(power(p))
?pbinom
(.3)^0*(1-.3)^12+12*(.3)^1*(1-.3)^11
pbinom(0,12,.3)+pbinom(1,12,.3)
pbinom(1,12,.3)
power = function(p){
((p)^0*(1-p)^12+12*(p)^1*(1-p)^11)
}
p = seq(0,.3,0.01)
plot(p, 1-power(p))
p = seq(0,.3,0.01)
plot(p, power(p))
setwd("~/Documents/Analytics 501 Fall 2015/50-percent-Chance-of-Awesome/")
political_data = read.csv("part2_exploratory_analysis/Datasets/PoldataSPIndustries.csv")
View(political_data)
political_data_short = ppolitical_data[!duplicated(political_data[, c("YEAR", "STATE", "FIRST", "LAST", "DISTRICT", "PARTY")]),]
political_data_short = political_data[!duplicated(political_data[, c("YEAR", "STATE", "FIRST", "LAST", "DISTRICT", "PARTY")]),]
View(political_data_short)
unique(political_data$PARTY)
t.test(political_data_short$CANDTOTAL[political_data_short$PARTY=="R"],
political_data_short$CANDTOTAL[political_data_short$PARTY=="D"])
